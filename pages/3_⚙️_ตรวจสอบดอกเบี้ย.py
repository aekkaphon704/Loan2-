# pages/3_‚öôÔ∏è_‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô.py
import streamlit as st
import gsheet_utils
from datetime import datetime, date
from babel.dates import format_date
import pandas as pd

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ---
def format_thai_date_admin(dt):
    if dt is None: return "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏"
    if isinstance(dt, str):
        try: dt = datetime.strptime(dt, "%Y-%m-%d").date()
        except ValueError:
            try: dt = datetime.strptime(dt, "%Y-%m-%d %H:%M:%S").date()
            except ValueError: return dt
    if isinstance(dt, date):
        return format_date(dt, format='d MMMM yyyy', locale='th_TH')
    return str(dt)

def safe_float(value):
    return float(value) if value not in [None, ''] else 0.0

st.set_page_config(page_title="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", page_icon="‚öôÔ∏è", layout="wide")
st.title("‚öôÔ∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")

_sh = gsheet_utils.connect_to_sheet()

today = date.today()
st.info(f"‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: **{format_thai_date_admin(today)}**")

st.markdown("---")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ ---
st.subheader("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞")

# ‡πÉ‡∏ä‡πâ Session State ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
if 'overdue_loans_df' not in st.session_state:
    st.session_state.overdue_loans_df = pd.DataFrame()

if st.button("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"):
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î..."):
        all_loans_df = gsheet_utils.get_data_as_dataframe("Loans", _sh)

    if all_loans_df.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        st.session_state.overdue_loans_df = pd.DataFrame() # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤
    else:
        try:
            all_loans_df['DueDate'] = pd.to_datetime(all_loans_df['DueDate'], errors='coerce').dt.date
            all_loans_df['PrincipalAmount'] = pd.to_numeric(all_loans_df['PrincipalAmount'], errors='coerce').fillna(0)
            all_loans_df['AmountPaid'] = pd.to_numeric(all_loans_df['AmountPaid'], errors='coerce').fillna(0)

            active_statuses = ['Active', '‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞']
            
            overdue_loans_check = all_loans_df[
                (all_loans_df['DueDate'] <= today) &
                (all_loans_df['Status'].isin(active_statuses))
            ].copy()
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Session State
            st.session_state.overdue_loans_df = overdue_loans_check
            st.rerun() # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•

        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤: {e}")
            st.session_state.overdue_loans_df = pd.DataFrame()

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏à‡∏≤‡∏Å Session State) ---
if not st.session_state.overdue_loans_df.empty:
    overdue_loans_to_show = st.session_state.overdue_loans_df
    st.error(f"üö® ‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ {len(overdue_loans_to_show)} ‡∏â‡∏ö‡∏±‡∏ö:")

    members_df_admin = gsheet_utils.get_data_as_dataframe("Members", _sh)
    if not members_df_admin.empty and 'Name' in members_df_admin.columns:
        overdue_loans_to_show = pd.merge(overdue_loans_to_show, members_df_admin[['MemberID', 'Name']], on='MemberID', how='left')
    else:
        overdue_loans_to_show['Name'] = 'N/A'

    overdue_loans_to_show['‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠'] = overdue_loans_to_show['PrincipalAmount'] - overdue_loans_to_show['AmountPaid']
    overdue_loans_to_show['‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î'] = overdue_loans_to_show['DueDate'].apply(format_thai_date_admin)

    display_cols = ['LoanID', 'Name', 'LoanAccount', 'PrincipalAmount', '‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î']
    st.dataframe(overdue_loans_to_show[display_cols].rename(columns={
        'LoanID': '‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡∏ç‡∏ç‡∏≤', 'Name': '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', 'LoanAccount': '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
        'PrincipalAmount': '‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô', '‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠': '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ï‡πâ‡∏ô)', '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î': '‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
    }), use_container_width=True)

    # --- *** ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ *** ---
    st.markdown("---")
    st.warning("‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï '‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
    
    # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown ‡∏à‡∏≤‡∏Å ID ‡∏ó‡∏µ‡πà‡∏û‡∏ö
    loan_id_list = overdue_loans_to_show['LoanID'].tolist()
    
    selected_loan_id_to_fix = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å LoanID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:",
        options=loan_id_list,
        index=None,
        placeholder="--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ID ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ---"
    )
    
    # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if selected_loan_id_to_fix:
        if st.button(f"‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {selected_loan_id_to_fix} ‡πÄ‡∏õ‡πá‡∏ô '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞'", type="primary"):
            st.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_loan_id_to_fix}...")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏™‡πà st.write ‡πÑ‡∏ß‡πâ)
            success = gsheet_utils.update_loan_status(_sh, str(selected_loan_id_to_fix), "‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞")
            
            if success:
                st.success(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {selected_loan_id_to_fix} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)")
                # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå State ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
                st.session_state.overdue_loans_df = pd.DataFrame() 
                st.rerun()
            else:
                st.error(f"‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {selected_loan_id_to_fix} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏î‡∏π Error ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)")

else:
    # (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∞‡πÑ‡∏£)
    if st.session_state.get('overdue_loans_df') is not None and st.session_state.overdue_loans_df.empty:
         st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞")
