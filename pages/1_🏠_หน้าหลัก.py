# app.py
import streamlit as st
import gsheet_utils
import pdf_utils
from datetime import datetime, date
from babel.dates import format_date

# --- 1. ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏° ---
THAI_HEADERS = {
    "MemberID": "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", "Name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "AddressNo": "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà",
    "Village": "‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô", "SubDistrict": "‡∏ï‡∏≥‡∏ö‡∏•", "District": "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
    "Province": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", "DOB": "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡∏õ-‡∏î-‡∏ß)", "Savings": "‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏™‡∏±‡∏à‡∏à‡∏∞",
    "Shares": "‡∏´‡∏∏‡πâ‡∏ô", "Loan1_Balance": "‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.1",
    "Loan2_Balance": "‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.2", "Loan4_Balance": "‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.4",
    "Loan1_InterestDue": "‡∏î‡∏ö.‡∏Ñ‡πâ‡∏≤‡∏á(1)",
    "Loan2_InterestDue": "‡∏î‡∏ö.‡∏Ñ‡πâ‡∏≤‡∏á(2)",
    "Loan4_InterestDue": "‡∏î‡∏ö.‡∏Ñ‡πâ‡∏≤‡∏á(4)",
    "LastUpdated": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"  # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
}

# --- 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ---
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", page_icon="üóÇÔ∏è", layout="wide")

def format_thai_date(dt):
    if dt is None: return "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏"
    return format_date(dt, format='d MMMM yyyy', locale='th_TH')

@st.cache_data(ttl=60)
def get_address_suggestions(_sh):
    df = gsheet_utils.get_data_as_dataframe("Members", _sh)
    if df.empty: return {k: [] for k in ["villages", "sub_districts", "districts", "provinces"]}
    return {
        "villages": sorted(df["Village"].dropna().unique().tolist()),
        "sub_districts": sorted(df["SubDistrict"].dropna().unique().tolist()),
        "districts": sorted(df["District"].dropna().unique().tolist()),
        "provinces": sorted(df["Province"].dropna().unique().tolist())
    }

# --- 3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
_sh = gsheet_utils.connect_to_sheet()
address_data = get_address_suggestions(_sh)

st.title("üóÇÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô")
st.caption(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheet: '{gsheet_utils.SHEET_NAME}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# --- 4. ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà ---
st.header("1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà")

with st.form("add_member_form", clear_on_submit=True):
    st.subheader("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")

    col1, col2 = st.columns(2)
    with col1:
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
        address_no = st.text_input("‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà")
        village_select = st.selectbox("‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)", [None] + address_data["villages"], index=0, format_func=lambda x: "--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---" if x is None else x)
        village_new = st.text_input("...‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
        sub_district_select = st.selectbox("‡∏ï‡∏≥‡∏ö‡∏• (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)", [None] + address_data["sub_districts"], index=0, format_func=lambda x: "--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---" if x is None else x)
        sub_district_new = st.text_input("...‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≥‡∏ö‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")

    with col2:
        district_select = st.selectbox("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)", [None] + address_data["districts"], index=0, format_func=lambda x: "--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---" if x is None else x)
        district_new = st.text_input("...‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
        province_select = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)", [None] + address_data["provinces"], index=0, format_func=lambda x: "--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---" if x is None else x)
        province_new = st.text_input("...‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
        today = date.today()
        dob = st.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î", value=None, format="DD/MM/YYYY",
                            min_value=date(today.year - 100, 1, 1), max_value=today)
        member_id = f"M-{int(datetime.now().timestamp())}"

    st.subheader("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô")
    col_a, col_b, col_c, col_d, col_e = st.columns(5)
    with col_a: savings = st.number_input("‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏™‡∏±‡∏à‡∏à‡∏∞", min_value=0.0, step=100.0)
    with col_b: shares = st.number_input("‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏∏‡πâ‡∏ô", min_value=0.0, step=100.0)
    with col_c: loan1 = st.number_input("‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.1", min_value=0.0, step=1000.0)
    with col_d: loan2 = st.number_input("‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.2", min_value=0.0, step=1000.0)
    with col_e: loan4 = st.number_input("‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.4", min_value=0.0, step=1000.0)
    
    submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")

# --- 5. ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
if submitted:
    village = village_select if village_select is not None else village_new
    sub_district = sub_district_select if sub_district_select is not None else sub_district_new
    district = district_select if district_select is not None else district_new
    province = province_select if province_select is not None else province_new

    if not name:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•' ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
    elif not village or not sub_district or not district or not province:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà)")
    else:
        timestamp_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S") # <-- ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        dob_str = dob.strftime("%Y-%m-%d") if dob else None
        
        new_row_data = [
            member_id, name, address_no, village, sub_district, district, province,
            dob_str, savings, shares, loan1, loan2, loan4,
            0, 0, 0,
            timestamp_str  # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        ]
        
        if gsheet_utils.add_row_to_sheet("Members", _sh, new_row_data):
            st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì '{name}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
            get_address_suggestions.clear()
        else:
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")

# --- 6. ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
st.header("2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
if st.button("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
    get_address_suggestions.clear()
    gsheet_utils.get_data_as_dataframe.clear()
    st.rerun()
st.info("üí° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏°‡∏∑‡∏≠")
members_df = gsheet_utils.get_data_as_dataframe("Members", _sh)
if members_df.empty:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
else:
    display_df = members_df.rename(columns=THAI_HEADERS)
    display_df.index = range(1, len(display_df) + 1)
    display_df.index.name = "‡∏•‡∏≥‡∏î‡∏±‡∏ö"
    display_columns = [col for col in THAI_HEADERS.values() if col in display_df.columns]
    st.dataframe(display_df[display_columns], use_container_width=True)

# --- 7. *** ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô  ---
st.header("3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
st.markdown("---") 

members_df_for_payment = gsheet_utils.get_data_as_dataframe("Members", _sh)

if members_df_for_payment.empty:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô")
else:
    # --- 1. ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ô‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°) ---
    member_names = members_df_for_payment["Name"].tolist()
    
    col_sel1, col_sel2 = st.columns(2)
    with col_sel1:
        selected_name = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:", 
            options=member_names, 
            index=None, 
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠...",
            key="payment_member_name"
        )
    with col_sel2:
        account_paid = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", 
            options=["1", "2", "4"], 
            index=None, 
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ...",
            key="payment_account_num"
        )

    # --- 2. ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠) ---
    prefilled_interest = 0.0
    prefilled_balance = 0.0  # <-- (‡πÄ‡∏û‡∏¥‡πà‡∏°) ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    
    if selected_name and account_paid:
        try:
            member_info = members_df_for_payment[members_df_for_payment["Name"] == selected_name].to_dict('records')[0]
            
            # (‡πÄ‡∏û‡∏¥‡πà‡∏°) ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            balance_col = f"Loan{account_paid}_Balance"
            if balance_col in member_info:
                prefilled_balance = float(member_info[balance_col])

            # ‡∏î‡∏∂‡∏á‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢
            interest_due_col = f"Loan{account_paid}_InterestDue"
            if interest_due_col in member_info:
                prefilled_interest = float(member_info[interest_due_col])
                
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

    # --- 3. ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ---
    if selected_name and account_paid:
        
        # *** ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î" ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ***
        st.subheader(f"‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏Ñ‡∏∏‡∏ì: {selected_name} | ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {account_paid})")
        col_metric1, col_metric2 = st.columns(2)
        with col_metric1:
            st.metric(
                label=f"üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ö‡∏ä. {account_paid})", 
                value=f"{prefilled_balance:,.2f} ‡∏ö‡∏≤‡∏ó"
            )
        with col_metric2:
            st.metric(
                label=f"üìà ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ (‡∏ö‡∏ä. {account_paid})", 
                value=f"{prefilled_interest:,.2f} ‡∏ö‡∏≤‡∏ó",
                delta=f"{prefilled_interest:,.2f} ‡∏ö‡∏≤‡∏ó", # (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏≠‡∏î > 0)
                delta_color="inverse" if prefilled_interest > 0 else "off"
            )
        # **********************************
        
        with st.form("payment_form", clear_on_submit=True):
            st.markdown("**‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô**")
            payment_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞", value=date.today(), format="DD/MM/YYYY")

            col_amount1, col_amount2 = st.columns(2)
            with col_amount1:
                interest_paid = st.number_input(
                    "‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ (‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)", 
                    min_value=0.0, 
                    value=prefilled_interest, # <-- ‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥!
                    step=100.0
                )
            with col_amount2:
                principal_paid = st.number_input("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô", min_value=0.0, step=100.0)
                
            payment_submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")

        # --- 4. ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
        if payment_submitted:
            member_info = members_df_for_payment[members_df_for_payment["Name"] == selected_name].to_dict('records')[0]
            member_id = member_info["MemberID"]
            
            loan_column_name = f"Loan{account_paid}_Balance"
            interest_due_col = f"Loan{account_paid}_InterestDue"
            
            new_balance = member_info[loan_column_name] - principal_paid
            new_interest_due = member_info[interest_due_col] - interest_paid 
            
            payment_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            transaction_id = f"T-{int(datetime.now().timestamp())}"
            payment_row = [
                transaction_id, payment_timestamp, member_id, 
                account_paid, principal_paid, interest_paid
            ]
            gsheet_utils.add_row_to_sheet("PaymentHistory", _sh, payment_row)

            updates = {
                loan_column_name: new_balance,
                interest_due_col: new_interest_due
            }
            success = gsheet_utils.update_member_data("Members", _sh, member_id, "MemberID", updates)

            if success:
                st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á '{selected_name}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
                
                latest_member_info = gsheet_utils.get_member_by_id(_sh, member_id)
                st.session_state['receipt_data'] = {
                    "member_info": latest_member_info,
                    "payment_date": format_thai_date(payment_date),
                    "account_paid": account_paid,
                    "principal_paid": principal_paid,
                    "interest_paid": interest_paid,
                    "total_paid": principal_paid + interest_paid,
                    "new_balances": latest_member_info
                }
                st.rerun()
            else:
                st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏´‡∏ô‡∏µ‡πâ")

# --- 8. ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
if 'receipt_data' in st.session_state and st.session_state['receipt_data']:
    receipt_info = st.session_state['receipt_data']
    st.info(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á '{receipt_info['member_info']['Name']}' ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß")
    
    pdf_bytes = pdf_utils.generate_receipt_pdf(receipt_info)
    
    st.download_button(
        label="üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (PDF)",
        data=bytes(pdf_bytes),
        file_name=f"Receipt_{receipt_info['member_info']['Name']}_{date.today().strftime('%Y%m%d')}.pdf",
        mime="application/pdf"
    )
    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà"):
        del st.session_state['receipt_data']
        st.rerun()
st.markdown("**‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ FB : ‡πÄ‡∏≠‡∏Å‡∏û‡∏•  ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á**")