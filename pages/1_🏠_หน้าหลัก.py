# pages/1_üè†_‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å.py
import streamlit as st
import gsheet_utils
import pdf_utils
from datetime import datetime, date
from babel.dates import format_date
from pytz import timezone
import pandas as pd # ‡πÄ‡∏û‡∏¥‡πà‡∏° import pandas

# --- 1. ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏° ---
THAI_HEADERS = {
    "MemberID": "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", "Name": "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "AddressNo": "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà",
    "Village": "‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô", "SubDistrict": "‡∏ï‡∏≥‡∏ö‡∏•", "District": "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
    "Province": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", "DOB": "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡∏õ-‡∏î-‡∏ß)", "Savings": "‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏™‡∏±‡∏à‡∏à‡∏∞",
    "Shares": "‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏∞‡∏™‡∏° (‡∏ö‡∏≤‡∏ó)",
    "Loan1_Balance": "‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.1", "Loan2_Balance": "‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.2", "Loan4_Balance": "‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.4",
    "Loan1_InterestDue": "‡∏î‡∏ö.‡∏Ñ‡πâ‡∏≤‡∏á(1)", "Loan2_InterestDue": "‡∏î‡∏ö.‡∏Ñ‡πâ‡∏≤‡∏á(2)", "Loan4_InterestDue": "‡∏î‡∏ö.‡∏Ñ‡πâ‡∏≤‡∏á(4)",
    "LastSharePurchaseDate": "‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
    "LastUpdated": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
}

# --- 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ---
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", page_icon="üóÇÔ∏è", layout="wide")

def format_thai_date(dt):
    if dt is None: return "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏"
    if isinstance(dt, str):
        try: dt = datetime.strptime(dt, "%Y-%m-%d").date()
        except ValueError: return dt
    return format_date(dt, format='d MMMM yyyy', locale='th_TH')

@st.cache_data(ttl=60)
def get_address_suggestions(_sh):
    df = gsheet_utils.get_data_as_dataframe("Members", _sh)
    if df.empty: return {k: [] for k in ["villages", "sub_districts", "districts", "provinces"]}
    return {
        "villages": sorted(df["Village"].dropna().unique().tolist()),
        "sub_districts": sorted(df["SubDistrict"].dropna().unique().tolist()),
        "districts": sorted(df["District"].dropna().unique().tolist()),
        "provinces": sorted(df["Province"].dropna().unique().tolist())
    }

def safe_float(value):
    return float(value) if value not in [None, ''] else 0.0

# --- 3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
_sh = gsheet_utils.connect_to_sheet()
address_data = get_address_suggestions(_sh)

st.title("üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# --- 4. ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà ---
st.header("1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà")
with st.form("add_member_form", clear_on_submit=True):
    st.subheader("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")
    col1, col2 = st.columns(2)
    with col1:
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
        address_no = st.text_input("‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà")
        village_select = st.selectbox("‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)", [None] + address_data["villages"], index=0, format_func=lambda x: "--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---" if x is None else x)
        village_new = st.text_input("...‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
        sub_district_select = st.selectbox("‡∏ï‡∏≥‡∏ö‡∏• (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)", [None] + address_data["sub_districts"], index=0, format_func=lambda x: "--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---" if x is None else x)
        sub_district_new = st.text_input("...‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≥‡∏ö‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
    with col2:
        district_select = st.selectbox("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)", [None] + address_data["districts"], index=0, format_func=lambda x: "--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---" if x is None else x)
        district_new = st.text_input("...‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
        province_select = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)", [None] + address_data["provinces"], index=0, format_func=lambda x: "--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---" if x is None else x)
        province_new = st.text_input("...‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
        today = date.today()
        dob = st.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î", value=None, format="DD/MM/YYYY",
                            min_value=date(today.year - 100, 1, 1), max_value=today)
        member_id = f"M-{int(datetime.now().timestamp())}"
    st.subheader("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô")
    col_a, col_b, col_c, col_d, col_e = st.columns(5)
    with col_a: savings = st.number_input("‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏™‡∏±‡∏à‡∏à‡∏∞", min_value=0.0, step=100.0)
    with col_b: shares = st.number_input("‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏∏‡πâ‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0.0, step=100.0)
    with col_c: loan1 = st.number_input("‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.1", min_value=0.0, step=1000.0)
    with col_d: loan2 = st.number_input("‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.2", min_value=0.0, step=1000.0)
    with col_e: loan4 = st.number_input("‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.4", min_value=0.0, step=1000.0)
    
    submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")

# --- 5. ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
if submitted:
    village = village_select if village_select is not None else village_new
    sub_district = sub_district_select if sub_district_select is not None else sub_district_new
    district = district_select if district_select is not None else district_new
    province = province_select if province_select is not None else province_new

    if not name or not village or not sub_district or not district or not province:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    else:
        bangkok_tz = timezone("Asia/Bangkok")
        timestamp_str = datetime.now(bangkok_tz).strftime("%Y-%m-%d %H:%M:%S")
        dob_str = dob.strftime("%Y-%m-%d") if dob else None
        
        new_row_data = [
            member_id, name, address_no, village, sub_district, district, province,
            dob_str, savings, shares, loan1, loan2, loan4,
            0, 0, 0, # ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢
            "",      # <-- LastSharePurchaseDate (‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
            timestamp_str
        ]
        
        if gsheet_utils.add_row_to_sheet("Members", _sh, new_row_data):
            st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì '{name}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
            get_address_suggestions.clear()
        else:
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")

# --- 6. ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
st.header("2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
if st.button("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
    get_address_suggestions.clear()
    gsheet_utils.get_data_as_dataframe.clear()
    st.rerun()
st.info("üí° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏°‡∏∑‡∏≠")
members_df = gsheet_utils.get_data_as_dataframe("Members", _sh)

if members_df.empty:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
else:
    display_df = members_df.rename(columns=THAI_HEADERS)
    
    if "‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏∞‡∏™‡∏° (‡∏ö‡∏≤‡∏ó)" in display_df.columns:
        # ‡πÉ‡∏ä‡πâ pd.to_numeric ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        numeric_shares = pd.to_numeric(display_df["‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏∞‡∏™‡∏° (‡∏ö‡∏≤‡∏ó)"], errors='coerce')
        safe_shares = numeric_shares.fillna(0)
        display_df.loc[:, "‡∏´‡∏∏‡πâ‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢)"] = (safe_shares / 50).astype(int)
    
    display_df.index = range(1, len(display_df) + 1)
    display_df.index.name = "‡∏•‡∏≥‡∏î‡∏±‡∏ö"
    
    display_columns = [col for col in THAI_HEADERS.values() if col in display_df.columns]
    if "‡∏´‡∏∏‡πâ‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢)" in display_df.columns:
        try:
            col_index = display_columns.index("‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏∞‡∏™‡∏° (‡∏ö‡∏≤‡∏ó)")
            display_columns.insert(col_index + 1, "‡∏´‡∏∏‡πâ‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢)")
        except ValueError:
            pass

    st.dataframe(display_df[display_columns], use_container_width=True)

# --- 7. ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ---
st.header("3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°")
st.markdown("---") 

members_df_for_payment = gsheet_utils.get_data_as_dataframe("Members", _sh)

if members_df_for_payment.empty:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô")
else:
    member_names = members_df_for_payment["Name"].tolist()
    selected_name = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:", 
        options=member_names, 
        index=None, 
        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠...",
        key="transaction_member_name"
    )

    if selected_name:
        member_info = members_df_for_payment[members_df_for_payment["Name"] == selected_name].to_dict('records')[0]
        member_id = member_info["MemberID"]
        bangkok_tz = timezone("Asia/Bangkok")
        
        transaction_type = st.radio(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°:",
            ("‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ", "‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ", "‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏±‡∏à‡∏à‡∏∞"),
            horizontal=True,
            label_visibility="collapsed"
        )
        
        # ------------------------------------
        #       ‡∏Å‡∏£‡∏ì‡∏µ "‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ"
        # ------------------------------------
        if transaction_type == "‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ":
            account_paid = st.selectbox( "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:", options=["1", "2", "4"], index=None, placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ...")
            
            if account_paid:
                balance_col = f"Loan{account_paid}_Balance"
                interest_due_col = f"Loan{account_paid}_InterestDue"
                
                prefilled_balance = safe_float(member_info.get(balance_col))
                prefilled_interest = safe_float(member_info.get(interest_due_col))

                st.subheader(f"‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏Ñ‡∏∏‡∏ì: {selected_name} | ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {account_paid})")
                col_metric1, col_metric2 = st.columns(2)
                with col_metric1:
                    st.metric(label=f"üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ö‡∏ä. {account_paid})", value=f"{prefilled_balance:,.2f} ‡∏ö‡∏≤‡∏ó")
                with col_metric2:
                    st.metric(label=f"üìà ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ (‡∏ö‡∏ä. {account_paid})", 
                              value=f"{prefilled_interest:,.2f} ‡∏ö‡∏≤‡∏ó",
                              delta=f"{prefilled_interest:,.2f} ‡∏ö‡∏≤‡∏ó" if prefilled_interest > 0 else None,
                              delta_color="inverse")
                
                with st.form("payment_form", clear_on_submit=True):
                    st.markdown("**‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô**")
                    payment_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞", value=date.today(), format="DD/MM/YYYY")
                    col_amount1, col_amount2 = st.columns(2)
                    with col_amount1:
                        interest_paid = st.number_input("‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ (‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)", 
                                                        min_value=0.0, 
                                                        value=max(0.0, prefilled_interest),
                                                        step=100.0)
                    with col_amount2:
                        principal_paid = st.number_input("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô", min_value=0.0, step=100.0)
                    payment_submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
                
                if payment_submitted:
                    timestamp_str = datetime.now(bangkok_tz).strftime("%Y-%m-%d %H:%M:%S")
                    new_balance = prefilled_balance - principal_paid
                    new_interest_due = prefilled_interest - interest_paid
                    
                    transaction_id = f"T-{int(datetime.now().timestamp())}"
                    payment_row = [transaction_id, timestamp_str, member_id, account_paid, principal_paid, interest_paid]
                    gsheet_utils.add_row_to_sheet("PaymentHistory", _sh, payment_row)

                    updates = {
                        balance_col: new_balance,
                        interest_due_col: new_interest_due,
                        "LastUpdated": timestamp_str
                    }
                    success = gsheet_utils.update_member_data("Members", _sh, member_id, "MemberID", updates)

                    if success:
                        st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á '{selected_name}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
                        latest_member_info = gsheet_utils.get_member_by_id(_sh, member_id)
                        
                        receipt_line_items = []
                        if principal_paid > 0:
                            receipt_line_items.append({'label': f"‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ {account_paid}", 'amount': principal_paid})
                        if interest_paid > 0:
                            receipt_line_items.append({'label': f"‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ {account_paid}", 'amount': interest_paid})
                        
                        receipt_balances = [
                            {'label': '‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.1 ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'amount': safe_float(latest_member_info.get('Loan1_Balance'))},
                            {'label': '‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.2 ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'amount': safe_float(latest_member_info.get('Loan2_Balance'))},
                            {'label': '‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ ‡∏ö‡∏ä.4 ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'amount': safe_float(latest_member_info.get('Loan4_Balance'))}
                        ]

                        st.session_state['receipt_data'] = {
                            "member_info": latest_member_info,
                            "payment_date": format_thai_date(payment_date),
                            "line_items": receipt_line_items,
                            "balance_summary": receipt_balances
                        }
                        st.rerun()
                    else:
                        st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏´‡∏ô‡∏µ‡πâ")

        # ------------------------------------
        #       ‡∏Å‡∏£‡∏ì‡∏µ "‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ"
        # ------------------------------------
        elif transaction_type == "‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ":
            st.subheader(f"‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ (‡∏Ñ‡∏∏‡∏ì: {selected_name})")
            
            today = date.today()
            purchase_period_start = date(today.year, 10, 5) # (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 11, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5)
            
            current_shares_baht = safe_float(member_info.get('Shares'))
            current_shares_units = int(current_shares_baht / 50)
            
            col_share1, col_share2 = st.columns(2)
            with col_share1:
                st.metric("‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", 
                          f"{current_shares_baht:,.0f} ‡∏ö‡∏≤‡∏ó", 
                          f"{current_shares_units} ‡∏´‡∏∏‡πâ‡∏ô")
            with col_share2:
                st.metric("‡∏¢‡∏≠‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ", "100.00 ‡∏ö‡∏≤‡∏ó", "2 ‡∏´‡∏∏‡πâ‡∏ô x 50 ‡∏ö‡∏≤‡∏ó")
            
            if today < purchase_period_start:
                st.error(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ")
                st.info(f"‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ {today.year} ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5 ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô {today.year} ‡∏Ñ‡∏£‡∏±‡∏ö")
                
            else:
                last_purchase_str = member_info.get("LastSharePurchaseDate")
                needs_to_buy = False
                
                if not last_purchase_str or last_purchase_str == "":
                    needs_to_buy = True
                else:
                    try:
                        last_purchase_date = datetime.strptime(last_purchase_str, "%Y-%m-%d").date()
                        if last_purchase_date.year < today.year:
                            needs_to_buy = True
                    except ValueError:
                        needs_to_buy = True
                
                if needs_to_buy:
                    st.warning(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡∏õ‡∏µ {today.year} ‡πÑ‡∏î‡πâ")
                    
                    col_btn1, col_btn2 = st.columns(2)
                    with col_btn1:
                        buy_button = st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô (100 ‡∏ö‡∏≤‡∏ó)", type="primary", use_container_width=True)
                    with col_btn2:
                        no_buy_button = st.button("‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ", use_container_width=True)

                    if buy_button:
                        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô..."):
                            timestamp_str = datetime.now(bangkok_tz).strftime("%Y-%m-%d %H:%M:%S")
                            today_str = date.today().strftime("%Y-%m-%d")

                            new_share_balance = current_shares_baht + 100
                            updates = {
                                "Shares": new_share_balance,
                                "LastSharePurchaseDate": today_str,
                                "LastUpdated": timestamp_str
                            }
                            gsheet_utils.update_member_data("Members", _sh, member_id, "MemberID", updates)

                            transaction_id = f"S-{int(datetime.now().timestamp())}"
                            history_row = [transaction_id, timestamp_str, member_id, 2, 100, "Purchase"] # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Type
                            gsheet_utils.add_row_to_sheet("ShareHistory", _sh, history_row)
                            
                            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
                            
                            latest_member_info = gsheet_utils.get_member_by_id(_sh, member_id)
                            st.session_state['receipt_data'] = {
                                "member_info": latest_member_info,
                                "payment_date": format_thai_date(date.today()),
                                "line_items": [{'label': "‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ (2 ‡∏´‡∏∏‡πâ‡∏ô)", 'amount': 100.00}],
                                "balance_summary": [
                                    {'label': '‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'amount': latest_member_info.get('Shares', 0), 'unit': '‡∏ö‡∏≤‡∏ó'},
                                    {'label': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'amount': int(latest_member_info.get('Shares', 0) / 50), 'unit': '‡∏´‡∏∏‡πâ‡∏ô'}
                                ]
                            }
                            st.rerun()

                    if no_buy_button:
                        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à..."):
                            timestamp_str = datetime.now(bangkok_tz).strftime("%Y-%m-%d %H:%M:%S")
                            today_str = date.today().strftime("%Y-%m-%d")
                            
                            updates = {
                                "LastSharePurchaseDate": today_str,
                                "LastUpdated": timestamp_str
                            }
                            gsheet_utils.update_member_data("Members", _sh, member_id, "MemberID", updates)
                            
                            transaction_id = f"S-{int(datetime.now().timestamp())}"
                            history_row = [transaction_id, timestamp_str, member_id, 0, 0, "Declined"] # <-- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô
                            gsheet_utils.add_row_to_sheet("ShareHistory", _sh, history_row)

                            st.info(f"‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à '‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô' ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏õ‡∏µ {today.year + 1})")
                            st.rerun()
                else:
                    st.success(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡∏ã‡∏∑‡πâ‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠) ‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ {today.year} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        # ------------------------------------
        #       ‡∏Å‡∏£‡∏ì‡∏µ "‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏±‡∏à‡∏à‡∏∞"
        # ------------------------------------
        elif transaction_type == "‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏±‡∏à‡∏à‡∏∞":
            st.subheader(f"‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°‡∏™‡∏±‡∏à‡∏à‡∏∞ (‡∏Ñ‡∏∏‡∏ì: {selected_name})")
            
            current_savings = safe_float(member_info.get('Savings'))
            st.metric("‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏™‡∏±‡∏à‡∏à‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", f"{current_savings:,.2f} ‡∏ö‡∏≤‡∏ó")
            
            with st.form("deposit_form"):
                deposit_amount = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å", min_value=1.0, step=50.0)
                deposit_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ù‡∏≤‡∏Å", value=date.today(), format="DD/MM/YYYY")
                
                deposit_submitted = st.form_submit_button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô")

            if deposit_submitted:
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å..."):
                    timestamp_str = datetime.now(bangkok_tz).strftime("%Y-%m-%d %H:%M:%S")

                    new_savings_balance = current_savings + deposit_amount
                    updates = { 
                        "Savings": new_savings_balance,
                        "LastUpdated": timestamp_str
                    }
                    gsheet_utils.update_member_data("Members", _sh, member_id, "MemberID", updates)

                    transaction_id = f"D-{int(datetime.now().timestamp())}"
                    history_row = [transaction_id, timestamp_str, member_id, deposit_amount]
                    gsheet_utils.add_row_to_sheet("SavingsHistory", _sh, history_row)
                    
                    st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å {deposit_amount:,.2f} ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà: {new_savings_balance:,.2f} ‡∏ö‡∏≤‡∏ó")
                    
                    latest_member_info = gsheet_utils.get_member_by_id(_sh, member_id)
                    
                    st.session_state['receipt_data'] = {
                        "member_info": latest_member_info,
                        "payment_date": format_thai_date(deposit_date),
                        "line_items": [
                            {'label': "‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°‡∏™‡∏±‡∏à‡∏à‡∏∞", 'amount': deposit_amount}
                        ],
                        "balance_summary": [
                            {'label': '‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏™‡∏±‡∏à‡∏à‡∏∞‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'amount': latest_member_info.get('Savings', 0), 'unit': '‡∏ö‡∏≤‡∏ó'}
                        ]
                    }
                    st.rerun()

# --- 8. ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞ ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ---
if 'receipt_data' in st.session_state and st.session_state['receipt_data']:
    receipt_info = st.session_state['receipt_data']
    st.info(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á '{receipt_info['member_info']['Name']}' ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß")
    
    pdf_bytes = pdf_utils.generate_receipt_pdf(receipt_info)
    
    st.download_button(
        label="üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (PDF)",
        data=bytes(pdf_bytes),
        file_name=f"Receipt_{receipt_info['member_info']['Name']}_{date.today().strftime('%Y%m%d')}.pdf",
        mime="application/pdf"
    )

# --- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å if) ---
if selected_name: # ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà / ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à"):
        if 'receipt_data' in st.session_state:
            del st.session_state['receipt_data']
        st.rerun()
